apply plugin: 'application'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'com.bmuschko.docker-remote-api'

import com.bmuschko.gradle.docker.tasks.image.*
import com.bmuschko.gradle.docker.tasks.container.*

version = '1.0.0-SNAPSHOT'
sourceCompatibility = 1.8

buildscript {
	ext {
		springBootVersion = '1.5.2.RELEASE'
		dockerPluginVersion = '3.2.0'
	}
	repositories {
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.bmuschko:gradle-docker-plugin:${dockerPluginVersion}")
	}
}

repositories {
	mavenCentral()
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-data-rest')
	compile('org.mariadb.jdbc:mariadb-java-client')

	testCompile('org.springframework.boot:spring-boot-starter-test')
}

// Run Application
run {
    main = 'org.songcvs.Application'
}

// Create DB Image
task buildDBImage(type: DockerBuildImage) {
    inputDir = file('src/main/resources/docker/db')
    tag = 'song-cvs/db:latest'

    onComplete {
        println "Song CVS DB Image built succesfully"
    }
}

// Creates DB Image container
task createDBImageContainer(type:DockerCreateContainer, dependsOn: [buildDBImage]) {
	targetImageId { 'song-cvs/db:latest' }
	portBindings = ['3306:3306']
	env = ["MYSQL_DATABASE=songcvs",
      	   "MYSQL_USER=songcvs",
      	   "MYSQL_PASSWORD=songcvs",
      	   "MYSQL_ROOT_PASSWORD=root"]
	//volumesFrom = ["/var/lib/mysql:rw"]
}

// Runs the DB container
task startDBImageContainer(type: DockerStartContainer, dependsOn: createDBImageContainer) {
    targetContainerId { createDBImageContainer.getContainerId() }
}